require 'yaml'
require 'ostruct'

fastlane_version "1.47.0"

default_platform :ios

match_git_url = "https://github.com/platanus/apple-certificates.git"

# Load configuration
config_file = File.expand_path("config.yml")
begin
  config = YAML.load(open(config_file))
rescue
  Helper.log.error "Config file not found"
  Helper.log.error "Please add a config.yml file in your fastlane directory"
  Helper.log.error "Check http://github.com/platanus/fastlane-base for information"
  Helper.log.error "about the structure of the config file"
  exit 1
end

config = OpenStruct.new(config)
if config.stages.nil?
  Helper.log.error "Required key missing (stages)"
  Helper.log.error "Please add a stages key with the stages you want to define"
  exit 1
end

# Public methods
def app_name_for(environment)
  if environment == "production"
    cordova_get_app_name
  else
    "#{cordova_get_app_name} - #{environment.capitalize}"
  end
end

def app_id_for(environment)
  "#{cordova_get_app_id}.#{environment}"
end

# Lanes
platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

    # increment_build_number

    # xctool # run the tests of your app
  end

  desc "Create app ids for each of the stages"
  lane :create do |options|
    config.stages.each_key do |stage|
      stage_config = config.stages[stage]
      app_name = app_name_for(stage)
      app_id = app_id_for(stage)
      produce(
        username: stage_config["apple_id"],
        team_id: stage_config["team_id"],
        app_identifier: app_id,
        app_name: app_name
      )
    end
  end

  desc "Create necessary profiles and certificates"
  lane :certs do
    config.stages.each_key do |stage|
      app_id = app_id_for(stage)
      stage_config = config.stages[stage]

      %w(appstore development).each do |sign_type|
        match(
          username: stage_config["apple_id"],
          team_id: stage_config["team_id"],
          app_identifier: app_id,
          git_url: match_git_url,
          type: sign_type
        )
      end
    end
  end

  private_lane :build do |options|
    stage_config = options[:stage_config]

    sh "cordova prepare --env=#{options[:stage]}"

    sign_type = options[:stage] == 'production' ? 'appstore' : 'development'
    match(
      git_url: match_git_url,
      type: sign_type,
      app_identifier: cordova_app_id,
      username: stage_config['apple_id'],
    )

    recreate_schemes(
      project: project_path
    )

    gym(
      verbose: true,
      project: project_path,
      scheme: cordova_app_name,
      xcconfig: "platforms/ios/cordova/build-#{stage_config['configuration']}.xcconfig"
    )

    publish
  end

  desc "Upload the binary"
  lane :publish do
    deliver(
      force: true,
      submit_for_review: false,
      skip_metadata: true,
      skip_screenshots: true
    )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
